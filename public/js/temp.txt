// function MyGraph(el, startNodes, startEdges) {
function MyGraph () {
        graph = new Object();
        this.error = new Object();

        // var links = graph.links;
        // var nodes = graph.nodes;

        // var myElement = d3.select("body");
        // var myElement = $(".main");
        this.width = window.innerWidth - 320;
        this.height = window.innerHeight - 52;
        // var width = window.innerWidth;
        // var height = window.innerHeight;

        // var width = myElement.innerWidth();
        // var height = myElement.innerHeight();
        // alert("Width:" + width + "height: " + height);
        // var width = window.innerWidth - 320;
        // var height = window.innerHeight - 52;

        // var zoom = d3.behavior.zoom()
        this.zoom = d3.zoom()
            .scaleExtent([1, 10])
            .on("zoom", this.zoomed);

        this.margin = {
            top: -5,
            right: -5,
            bottom: -5,
            left: -5
        };
        this.svg = d3.select("body")
            .append("svg")
            .attr("width", this.width)
            .attr("height", this.height)
            // .attr("transform", "translate(" + margin.left + "," + margin.right + ")")
            .on("click", this.svgMouseUp)
            .call(this.zoom);



        this.container = this.svg.append("g");
        this.color = d3.scaleOrdinal(d3.schemeCategory20);

simulation = d3.forceSimulation()
            .force("link", d3.forceLink().id(function(d) {
                return d.id;
            }))
            .force("charge", d3.forceManyBody())
            .force("center", d3.forceCenter(this.width / 2, this.height / 2));


        this.links = this.simulation.force("link").links();
        this.nodes = this.simulation.nodes();

}

MyGraph.prototype = {
    //##################################################
    //# Draw the graph
    //##################################################
    // this.refreshGraph = function() {
    refreshGraph: function () {
        // {{{

        var links = graph.links;
        var nodes = graph.nodes;
        // simulation.force("link").links(links);
        // simulation.nodes(nodes);

        var link = this.container.selectAll(".link")
            // .data(graph.links)
            // .attr("class", "link")
            // .style("stroke-width", function(d) {
            //     return Math.sqrt(d.value);
            // })
            // .data(links, function(d){return d.source + d.target})
            .data(links);

        link.enter().append("line")
            .attr("class", "link")
            .style("stroke-width", function(d) {
                return Math.sqrt(d.value);
            });

        var gnodes = this.container.selectAll('.node')
            // .data(graph.nodes)
            // .data(nodes, function(d){return d.id})
            .data(nodes)
            .attr("class", "node")
            // .call(d3.drag()
            //     .on("start", this.dragstarted)
            //     .on("drag", this.dragged)
            //     .on("end", this.dragended));

        // gnodes.select("circle")
        // .attr("r", 5)
        // .style("fill", function(d) {
        //     return color(d.group);
        // });

        // gnodes.select(".nodeLabel")
        //     .attr("class", "nodeLabel")
        //     .attr("x", 7)
        //     .attr("dy", ".35em")
        //     .text(function(d) {
        //         return d.id;
        //     });

        var newNodes = gnodes.enter()
            .append('g')
            .attr("class", "node")
            // .call(d3.drag()
            //     .on("start", this.dragstarted)
            //     .on("drag", this.dragged)
            //     .on("end", this.dragended));

        var color = d3.scaleOrdinal(d3.schemeCategory20);
        var node = newNodes.append("circle")
            .attr("r", 5)
            .style("fill", function(d) {
                // return d3.scaleOrdinal(d3.schemeCategory20)(d.group);
                return color(d.group);
            });


        var labels = newNodes.append("svg:text")
            .attr("class", "nodeLabel")
            .attr("x", 7)
            .attr("dy", ".35em")
            .text(function(d) {
                return d.id;
            });


        //     .attr("class", "nodeLabel")
        //     .attr("x", 7)
        //     .attr("dy", ".35em")
        //     .text(function(d) {

        //         // if (! $('#fixOnDragBox').is(":checked")){
        //         return d.id;
        //         // } else {
        //         //     return "";
        //         // }
        //     });
        // labels.exit().remove();

        this.simulation.nodes(nodes);
        this.simulation.force("link").links(links);
        // d3.forceLink().links(graph.links);

        this.simulation
            .on("tick", this.ticked);

        // simulation.tick();
        // simulation.alpha(0);
        // simulation.alphaTarget(0.3).restart();
        // simulation.force.start();
        function ticked() {
            link
                .attr("x1", function(d) {
                    return d.source.x;
                })
                .attr("y1", function(d) {
                    return d.source.y;
                })
                .attr("x2", function(d) {
                    return d.target.x;
                })
                .attr("y2", function(d) {
                    return d.target.y;
                });

            gnodes.attr("transform", function(d) {
                return 'translate(' + [d.x, d.y] + ')';
            });
        }
    },
    // end of refreshGraph()
    // }}}


    zoomed: function() {
        this.container.attr("transform", d3.event.transform);
    },

    // dragstarted(d) {
    //     if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    //     d.fx = d.x;
    //     d.fy = d.y;
    // }

    // dragged(d) {
    //     d.fx = d3.event.x;
    //     d.fy = d3.event.y;
    // }

    // dragended(d) {
    //     if (!$('#fixOnDragBox').is(":checked")) {
    //         if (!d3.event.active) simulation.alphaTarget(0);
    //         d.fx = null;
    //         d.fy = null;
    //     }
    // }

    // hideLabels() {
    //     container.selectAll(".nodeLabel")
    //         .style("opacity", function() {
    //             return $('#hideLabelsBox').is(":checked") ? 0 : 1
    //         });
    // }

    svgMouseUp: function(d) {

        // d3.event.stopPropagation();
        var coordinates = [0, 0];
        var coordinates = d3.mouse(this);
        var newNode = {
            "id": "New Node",
            "group": 3,
            "x": coordinates[0],
            "y": coordinates[1],
            "fx": coordinates[0],
            "fy": coordinates[1]
        };
        // alert("123\n" + JSON.stringify(graph));
        graph.nodes.push(newNode);
        simulation.nodes(graph.nodes);
        // this.refreshGraph();
        // graph.nodes.push(newNode);
        // simulation.nodes().push(newNode);
        // simulation.nodes(simulation.nodes().push(newNode));
    },

    setGraph: function(newGraph) {
        graph = newGraph;
        this.simulation.nodes(graph.nodes);
        this.simulation.force("link").links(graph.links);

        // alert("123\n" + JSON.stringify(graph));
        this.refreshGraph();
    }

}
